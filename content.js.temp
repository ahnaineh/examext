// Show a prompt editor modal dialog
function showPromptEditor(imageData) {
    console.log("Showing prompt editor");

    // Get the default prompt from storage or use a default one
    chrome.storage.sync.get('defaultPrompt', (data) => {
        // Default prompt if none is stored
        let promptText = data.defaultPrompt || `You're an expert test solver. Look at the question and options in the screenshot and select the best answer based on the given context (if any). If it's a True/False, indicate clearly which one is correct.
Be concise. Just give the answer and a short explanation if needed.`;

        // Create modal container - now with more transparency and less visibility
        const modal = document.createElement('div');
        modal.className = 'gemini-prompt-modal';
        modal.style.position = 'fixed';
        modal.style.top = '0';
        modal.style.left = '0';
        modal.style.width = '100%';
        modal.style.height = '100%';
        modal.style.backgroundColor = 'rgba(0, 0, 0, 0.2)'; // Much more transparent background
        modal.style.display = 'flex';
        modal.style.justifyContent = 'center';
        modal.style.alignItems = 'center';
        modal.style.zIndex = '2147483647';

        // Create modal content with more subtlety
        const modalContent = document.createElement('div');
        modalContent.style.backgroundColor = 'rgba(255, 255, 255, 0.8)'; // Semi-transparent background
        modalContent.style.borderRadius = '8px';
        modalContent.style.width = '400px'; // Smaller width
        modalContent.style.maxWidth = '80%';
        modalContent.style.maxHeight = '80%';
        modalContent.style.padding = '15px';
        modalContent.style.border = '1px solid rgba(0, 0, 0, 0.1)'; // Subtle border
        modalContent.style.display = 'flex';
        modalContent.style.flexDirection = 'column';
        modalContent.style.gap = '10px';
        modalContent.style.backdropFilter = 'blur(5px)'; // Apply blur effect for more subtlety
        
        // Title - smaller and more subtle
        const title = document.createElement('div'); // Using div instead of h3
        title.textContent = 'Edit Prompt';
        title.style.margin = '0';
        title.style.padding = '0';
        title.style.fontFamily = 'system-ui, -apple-system, sans-serif';
        title.style.fontSize = '14px';
        title.style.color = '#555';
        title.style.fontWeight = '500';
        
        // Textarea for prompt editing - more subtle
        const textarea = document.createElement('textarea');
        textarea.value = promptText;
        textarea.style.width = '100%';
        textarea.style.height = '150px'; // Smaller height
        textarea.style.padding = '8px';
        textarea.style.fontSize = '13px';
        textarea.style.border = '1px solid rgba(0, 0, 0, 0.1)'; // More subtle border
        textarea.style.borderRadius = '4px';
        textarea.style.resize = 'vertical';
        textarea.style.fontFamily = 'monospace';
        textarea.style.backgroundColor = 'rgba(255, 255, 255, 0.7)'; // Semi-transparent
        
        // Button container - more minimal
        const buttonContainer = document.createElement('div');
        buttonContainer.style.display = 'flex';
        buttonContainer.style.justifyContent = 'flex-end';
        buttonContainer.style.gap = '8px';
        
        // Cancel button - more subtle
        const cancelButton = document.createElement('button');
        cancelButton.textContent = 'Cancel';
        cancelButton.style.padding = '6px 12px';
        cancelButton.style.backgroundColor = 'rgba(240, 240, 240, 0.7)';
        cancelButton.style.border = 'none';
        cancelButton.style.borderRadius = '4px';
        cancelButton.style.cursor = 'pointer';
        cancelButton.style.fontSize = '12px';
        cancelButton.style.color = '#555';
        cancelButton.addEventListener('click', () => {
            document.body.removeChild(modal);
        });
        
        // Save as default button - more subtle
        const saveDefaultButton = document.createElement('button');
        saveDefaultButton.textContent = 'Save Default';
        saveDefaultButton.style.padding = '6px 12px';
        saveDefaultButton.style.backgroundColor = 'rgba(76, 175, 80, 0.6)';
        saveDefaultButton.style.color = 'white';
        saveDefaultButton.style.border = 'none';
        saveDefaultButton.style.borderRadius = '4px';
        saveDefaultButton.style.cursor = 'pointer';
        saveDefaultButton.style.fontSize = '12px';
        saveDefaultButton.addEventListener('click', () => {
            const newPrompt = textarea.value.trim();
            chrome.storage.sync.set({'defaultPrompt': newPrompt}, () => {
                sendWithCustomPrompt(imageData, newPrompt);
                document.body.removeChild(modal);
            });
        });
        
        // Submit button - more subtle
        const submitButton = document.createElement('button');
        submitButton.textContent = 'Submit';
        submitButton.style.padding = '6px 12px';
        submitButton.style.backgroundColor = 'rgba(33, 150, 243, 0.6)';
        submitButton.style.color = 'white';
        submitButton.style.border = 'none';
        submitButton.style.borderRadius = '4px';
        submitButton.style.cursor = 'pointer';
        submitButton.style.fontSize = '12px';
        submitButton.addEventListener('click', () => {
            const newPrompt = textarea.value.trim();
            sendWithCustomPrompt(imageData, newPrompt);
            document.body.removeChild(modal);
        });
        
        // Add elements to the modal
        buttonContainer.appendChild(cancelButton);
        buttonContainer.appendChild(saveDefaultButton);
        buttonContainer.appendChild(submitButton);
        
        modalContent.appendChild(title);
        modalContent.appendChild(textarea);
        modalContent.appendChild(buttonContainer);
        
        modal.appendChild(modalContent);
        document.body.appendChild(modal);
        
        // Focus the textarea
        textarea.focus();
        textarea.select();
        
        // Add keyboard listener for Escape key
        const handleKeyDown = (e) => {
            if (e.key === 'Escape') {
                document.removeEventListener('keydown', handleKeyDown);
                document.body.removeChild(modal);
            }
        };
        document.addEventListener('keydown', handleKeyDown);
    });
}

// Send screenshot to background script with custom prompt
function sendWithCustomPrompt(imageData, customPrompt) {
    chrome.runtime.sendMessage({
        action: "analyzeScreenshot",
        imageData: imageData,
        customPrompt: customPrompt
    });
}
